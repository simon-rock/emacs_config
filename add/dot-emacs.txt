(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(Man-width 80)
 '(auto-compression-mode t)
 '(auto-image-file-mode t)
 '(blink-cursor-mode nil)
 '(bookmark-bmenu-file-column 50)
 '(bookmark-menu-length 90)
 '(case-fold-search t)
 '(change-major-mode-with-file-name nil)
 '(column-number-mode t)
 '(compile-command "make -k")
 '(confirm-kill-emacs (quote y-or-n-p))
 '(global-font-lock-mode nil nil (font-lock))
 '(indent-tabs-mode t)
 '(inhibit-startup-screen t)
 '(initial-scratch-message nil)
 '(kill-ring-max 200)
 '(make-backup-files nil)
 '(mouse-wheel-mode t)
 '(mouse-yank-at-point t)
 '(save-place t nil (saveplace))
 '(show-paren-mode t)
 '(show-paren-style (quote parentheses))
 '(standard-indent 8)
 '(system-messages-locale "C" t)
 '(system-time-locale "C" t)
 '(transient-mark-mode t)
 '(uniquify-buffer-name-style (quote post-forward-angle-brackets) nil (uniquify))
 '(w3m-default-display-inline-images t)
 '(woman-fill-column 80)
 '(ring-bell-function (quote ignore) t)
 '(visible-bell nil)
 '(x-select-enable-clipboard t))
;;----------------------------------------------------------------------

	;; latin 字体已在 .Xresources 中指定
;; (set-fontset-font "fontset-default"
;;		  'han '("你喜欢的中文字体名" . "unicode-bmp"))

;;设置标题栏显示文件的完整路径名
(setq frame-title-format
      '("%S" (buffer-file-name "%f" (dired-directory dired-directory "%b"))))

;; 自动的在文件末增加一新行
(setq require-final-newline t)

; default mode for *scratch* buffer is text
(setq initial-major-mode 'text-mode)

;; visually indicate empty lines after the buffer end
(setq-default indicate-empty-lines t)

(setq comment-column 60)
(mouse-avoidance-mode 'animate)

;; Replace selected text when typing
(delete-selection-mode t)

;; uncomment this line to disable loading of "default.el" at startup
(setq inhibit-default-init t)
 
;; 编译无错的话，不需要显示 compilation frame
(setq compilation-finish-function
      (lambda (buf str)
        (if (string-match "exited abnormally" str)
            ;;there were errors
            (message "compilation errors, press C-x ` to visit")
          ;;no errors, make the compilation window go away in 0.5 seconds
          (run-at-time 0.5 nil 'delete-windows-on buf)
          (message "NO COMPILATION ERRORS!"))))

;; 既然 emacs 默认 C-c C-c 为对源代码选区进行注释，那么就用我们就用 C-c C-v 进行反注释
(global-set-key "\C-c\C-v" 'uncomment-region)

; 将 tab 转化为空格
; 对于已经保存好的文件，可以选中需要转化的区域，然后 M-x untabify
; 在 vim 中添加: set expandtab
; 对于已经保存好的文件，可以选中需要转化的区域，vim 中执行:retab
; (setq-default indent-tabs-mode nil)

;; 退出gdb的时候关闭gdb对应的buffer
;; (add-hook 'gdb-mode-hook 'kill-buffer-when-shell-command-exit)

(fset 'yes-or-no-p 'y-or-n-p)
;; 改变 Emacs 固执的要你回答 yes 的行为。按 y 或空格键表示 yes，n 表示 no。

;; (defalias 'yes-or-no-p 'y-or-n-p) ; y or n is enough
;; (defalias 'list-buffers 'ibuffer) ; always use ibuffer
;; (defalias 'man 'woman)

;; 解决 emacs 23 shell 下乱码
;; (ansi-color-for-comint-mode-on)
(autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

;; 改进 mode line 行尾结束符类型的显示
(setq eol-mnemonic-undecided "(?)"  ;; unknown EOL type
      eol-mnemonic-unix  "(unix)" ;; LF
      eol-mnemonic-dos  "(dos)"  ;; CRLF
      eol-mnemonic-mac  "(mac)") ;; CR

;;----------------------------------------------------------------------


;; 模式配置区 ------------------------------------------------------------

(defun newline-maybe-indent ()
  "`indent-according-to-mode' 的修改版, 原版依照过去非空白行的缩进而对本行进行缩进（过去非空白行有时并非上一行），本函数而按照 mg 编辑器换行规则操作。即：“本行缩进列值即为换行后光标列值”。
See `newline-and-indent'."
      (interactive "*")
      (newline)
      (let ((column (save-excursion
		(forward-line -1)
		(skip-chars-forward " \t")
		(current-column))))
	(if (<= (current-column) (current-indentation))
	    (indent-line-to column)
	  (save-excursion (indent-line-to column)))))

;; 仿 mg 编辑器的简单功能，以免我因 Emacs 功能太多而陷入恐惧症！
;; 为什么不直接使用 mg 编辑器？
;;	我使用过一阵子 mg，它很简单，同时功能也足够且不多余，这个我很喜欢。
;;	但我还想要编辑中文文本的能力。
;; 当语句中的多个表达式需要分多行写，且各表达式左侧对齐时，不要多行写，所有的写到一行。因为分多行写是为了代表易于阅读，而各表达式左侧对齐是为了更加漂亮。在此情形，所有表达式都写到一行，因为在编辑代码时即要易于阅读，又要代码排版漂亮会分心。
(add-hook 'text-mode-hook
	  (lambda ()
	    (kill-all-local-variables)
	    (setq mode-name "Text")
	    (setq default-tab-width 8)
	    (setq-default indent-tabs-mode t)
	    (setq standard-indent 8)
	    (setq-default line-move-visual nil)	;; 这两行可以实现光标在行间移动时不会跳到行首
	    (setq-default track-eol t)
	    ;; C-m 即回车本来是绑定到 newline-and-indent 函数的，但此函数的实现会在每次换行之前清除当前行行尾前空白字符的动作（当前行无任何可见字符时，只留下换行符。这样在向上移动到此行时，光标会置于行首，而不是适当的缩进位置。）
	    ;; 但在 mg 中不会这样，所以修改了一下其实现。
	    ;; (local-set-key [ret] 'newline-maybe-indent)
	    ;; (local-set-key "\C-m" 'newline-maybe-indent)
	    (local-set-key (kbd "RET") 'newline-maybe-indent)

	    (local-set-key (kbd "TAB") 'tab-to-tab-stop)	;; tty
	    (local-set-key (kbd "<tab>") 'tab-to-tab-stop)	;; gui
	    (local-set-key [(meta ?i)] 'indent-for-tab-command)
	    (local-set-key [(meta ?')] 'select-inside-quotes)
	))

;; 清空自动模式匹配列表，并在打开任意文件时其主要模式都为文本模式。
(setq auto-mode-alist ())
(setq default-major-mode 'text-mode)

;; shell mode 中执行 exit 命令时，该缓冲并不自动关闭，只有这样：
(add-hook 'shell-mode-hook 'wcy-shell-mode-hook-func)
(defun wcy-shell-mode-hook-func  ()
  (set-process-sentinel (get-buffer-process (current-buffer))
                        #'wcy-shell-mode-kill-buffer-on-exit))
(defun wcy-shell-mode-kill-buffer-on-exit (process state)
  (message "%s" state)
  (if (or
       (string-match "exited abnormally with code.*" state)
       (string-match "finished" state))
      (kill-buffer (current-buffer))))

;;; ido 模式
;; Type M-x customize-variable <RET> ido-mode <RET>
(add-hook 'ido-define-mode-map-hook 'ido-my-keys)
(defun ido-my-keys ()
  (define-key ido-mode-map "\C-m" 'ido-exit-minibuffer)
  ;; cycle through matches
  (define-key ido-mode-map "\C-r" 'ido-prev-match)
  (define-key ido-mode-map "\C-s" 'ido-next-match)
  (define-key ido-mode-map [right] 'ido-next-match)
  (define-key ido-mode-map [left] 'ido-prev-match))

(ido-mode t)
	;; You can disable the merging (the "looking in other directories" in ido vulgo) with
(setq ido-auto-merge-work-directories-length -1)
	;; but you can also undo the merge with C-z in ido.

;; '(ido-enable-last-directory-history nil)
;; '(ido-record-commands nil)
;; '(ido-max-work-directory-list 0)
;; '(ido-max-work-file-list 0)

;; C-x f /sudo:localhost:/etc/fstab
(require 'tramp)
(setq tramp-default-method "sudo")
(setq tramp-default-host "localhost")
(setq tramp-default-user "root")

;; ;; 最近打开文件 -- ido 方法
(require 'recentf)
(recentf-mode t)
(setq recentf-max-saved-items 25)

(global-set-key (kbd "C-x C-r") 'ido-recentf-open)
(defun ido-recentf-open ()
  "Use `ido-completing-read' to \\[find-file] a recent file"
  (interactive)
  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
    (message "Aborting")))

;;----------------------------------------------------------------------

(defun goto-paren ()
  "跳到匹配的括号"
  (interactive)
  (cond
   ((looking-at "[ \t]*[[\"({]") (forward-sexp) (backward-char))
    ((or (looking-at "[]\")}]") (looking-back "[]\")}][ \t]*")) (if (< (point) (point-max)) (forward-char)) (backward-sexp))
   (t (message "找不到匹配的括号"))))
(global-unset-key "\C-]")
(global-set-key "\C-]" 'goto-paren)

;; 104 键盘布局 menu 键在 ctrl 左边，容易冲突，特将此绑定解除。
(global-unset-key (kbd "<menu>"))
;; 不需要用 C-\ 调用 Emacs 内置输入法了
(global-unset-key (kbd "C-\\"))

;; M-/ 智能匹配
(global-set-key [(meta ?/)] 'hippie-expand)
(setq hippie-expand-try-functions-list
      '(try-expand-dabbrev                 ; 搜索当前 buffer
        try-expand-dabbrev-visible         ; 搜索当前可见窗口
        try-expand-dabbrev-all-buffers     ; 搜索所有 buffer
        try-expand-dabbrev-from-kill       ; 从 kill-ring 中搜索
        try-complete-file-name-partially   ; 文件名部分匹配
        try-complete-file-name             ; 文件名匹配
        try-expand-all-abbrevs             ; 匹配所有缩写词
        try-expand-list                    ; 补全一个列表
        try-expand-line                    ; 补全当前行
        try-complete-lisp-symbol-partially ; 部分补全 elisp symbol
        try-complete-lisp-symbol))         ; 补全 lisp symbol

;;; 临时记号
(global-set-key [(control ?\,)] 'ska-point-to-register) ; 在 A 地 按 C-, 设置标记
(global-set-key [(control ?\.)] 'ska-jump-to-register)  ; 在 B 地 按 C-. 到达 A 地
(defun ska-point-to-register()
  "Store cursorposition _fast_ in a register. 
Use ska-jump-to-register to jump back to the stored 
position."
  (interactive)
  (setq zmacs-region-stays t)
  (point-to-register 8)
  (message "已设置位标，C-. 跳回来"))

(defun ska-jump-to-register()
  "Switches between current cursorposition and position
that was stored with ska-point-to-register."
  (interactive)
  (setq zmacs-region-stays t)
  (let ((tmp (point-marker)))
    (jump-to-register 8)
    (set-register 8 tmp)))

;; from Xah
(defun insert-date ()
  "Insert current date yyyy-mm-dd."
  (interactive)
  (when (region-active-p)
    (delete-region (region-beginning) (region-end) ))
  (insert (format-time-string "%Y-%m-%d")))
(global-set-key (kbd "C-c d") 'insert-date)

(defun insert-current-date-time ()
  "insert the current date and time into current buffer.
Uses `current-date-time-format' for the formatting the date/time."
  (interactive)
  (insert "==========\n")
  ;; (insert (let () (comment-start)))
  (insert (format-time-string "%Y-%02m-%02d %02H:%02M:%02S %3A" (current-time)))
  (insert "\n")
  )
(global-set-key (kbd "C-c t") 'insert-current-date-time)

;; 这是一个重载了 emacs/lisp/bindings.el 中相同的函数，只是最后一行不同而己 (因修改 bindings.el 不起作用，所以才重载)
; 这样，只需要点击 mode line，缓存文本编码就可以在 utf-8-unix, utf-8-mac, gbk-dos 之间循环切换
(defun mode-line-change-eol (event)
  "Cycle through the various possible kinds of end-of-line styles."
  (interactive "e")
  (with-selected-window (posn-window (event-start event))
    (let ((eol (coding-system-eol-type buffer-file-coding-system)))
      (set-buffer-file-coding-system
       (cond ((eq eol 0) 'gbk-dos) ((eq eol 1) 'utf-8-mac) (t 'utf-8-unix))))))

(defun revert-buffer-with-cp936-dos ()
  "文档中很多 ^M 字符，本函数可以解决"
  (interactive)
  (revert-buffer-with-coding-system 'cp936-dos)
  (set-buffer-modified-p t))

(defun get-filename ()
  (interactive)
  (insert (file-name-nondirectory buffer-file-truename)))

(defun new-scratch ()
  (interactive)
  (switch-to-buffer (get-buffer-create (concat "*scratch" "-" (format-time-string "%02H:%02M:%02S" (current-time)) "*"))))

;;----------------------------------------------------------------------


;; 不与自定义函数关联的键绑定 -----------------------------------------------
(global-set-key [(f5)] 'bookmark-bmenu-list)
(global-set-key [(f6)] 'w3m-bookmark-view)
;; server mode 的开关
(global-set-key [(f12)] 'server-mode)

(global-set-key "\C-x\C-b" 'ibuffer)
;; (global-set-key (kbd "<C-tab>") 'switch-to-buffer)

;; 挂起 Emacs
(global-unset-key [(control z)])
(global-unset-key "\C-x\C-z")
(global-set-key (kbd "C-z z") 'suspend-frame)

;; 进入 Shell
(global-set-key (kbd "C-x x") 'shell)

;; 我将 uEmacs/PK 中将 C-j 设置成光标左移，这里设置成一致
(global-set-key "\C-j" 'backward-char)

;; uEmacs/PK 中设置一致
(global-set-key "\C-h" 'delete-backward-char)

(global-set-key [(f8)] 'ido-dired)

;; C-SPC 多数时候都是操作系统的输入法切换，set-mark-command 无论如何都要设置
;; 禁用 emacs Ctrl-Space 快捷键
(global-unset-key (kbd "C-SPC"))

;; 设置标记
;; (global-set-key [(meta ?n)] 'set-mark-command)
;; 设置标记 - FreeBSD mg 方式
(global-set-key [(control ?\`)] 'set-mark-command)

;; 设置标记 - uEmacs/PK 方式
(global-set-key (kbd "M-SPC") 'set-mark-command)

;;----------------------------------------------------------------------
(require 'w3m)
(setq w3m-coding-system 'utf-8
      w3m-file-coding-system 'utf-8
      w3m-file-name-coding-system 'utf-8
      w3m-input-coding-system 'utf-8
      w3m-output-coding-system 'utf-8
      w3m-terminal-coding-system 'utf-8)

 (define-key w3m-mode-map [mouse-2] 'w3m-mouse-view-this-url-new-session)

(setq w3m-use-cookies t)
(setq w3m-home-page "http://www.google.com/")

;; w3m-cookie-shutdown 清除 cookie

;; Dired 模式文件操作技巧，超级实用
;; when you have dired of different dir in 2 panes, and when you press C to copy, the other dir in the split pane will be default destination.
(setq dired-dwim-target t)

(require 'dired-x)
(setq-default dired-omit-mode t)
(setq dired-omit-files "^#\\|^\\..*\\|semantic.cache")
(setq dired-omit-size-limit 1000000)
      ;; 直接进入目录
(put 'dired-find-alternate-file 'disabled nil)

;; dired 的默认排序方式
(setq dired-listing-switches (purecopy "-la --group-directories-first"))
(defun dired-sort-toggle ()
  "覆盖 dired 中的同名函数，原函数只提供了按“名称”和“日期”两种排序方式，而这里提供按“名称”、“日期且目录优先”、“名称且目录优先”三种排序方式。dired-actual-switches 值必须符合 dired-sort-by-date-regexp 和 dired-sort-by-name-regexp 规则"
  (setq dired-actual-switches
	(let (case-fold-search)
	  (cond ((string-equal "-la --group-directories-first" dired-actual-switches) (purecopy "-la -g -G"))
		((string-equal "-la -g -G" dired-actual-switches) (purecopy "-lat --group-directories-first"))
		((string-equal "-lat --group-directories-first" dired-actual-switches) (purecopy "-la --group-directories-first")))))
  (dired-sort-set-modeline)
  (revert-buffer))

;; dired 模式中，C-x r m 绑定为将当前目录或当前文件加入书签。
;; 书签名默认为：上次输入的书签名，当前位置文件名，当前目录名
(defun dired-bookmark-set ()
  (interactive)
  (require 'bookmark)
  (let ((file-name (dired-get-filename nil t)))
    (if (or (null file-name) (file-directory-p file-name))
	(bookmark-set)
      (let ((default-name (dired-get-filename 'no-dir t)))
	(let ((bookmark-name
	       (read-from-minibuffer
		(format "Set bookmark (%s): " default-name)
		nil nil
		;;bookmark-minibuffer-read-name-map
		nil nil default-name)))
	  ;; 用户直接回车，默认使用文件名
	  (and (string-equal bookmark-name "") (setq bookmark-name default-name))
	  (let ((last-bookmark-make-record-function bookmark-make-record-function))
	    (setq bookmark-make-record-function 'dired-bookmark-make-record)
	    (bookmark-set bookmark-name)
	    (setq bookmark-make-record-function last-bookmark-make-record-function))
	  (message "%s" bookmark-make-record-function))))))

(defun dired-bookmark-make-record ()
  `(,(dired-get-filename 'no-dir t) (filename . ,(dired-get-filename nil t))
    (front-context-string . nil)
    (rear-context-string . nil)
    (position . 1)))

(defun dired-w3m-read-it ()
  (interactive)
  (w3m-goto-url-new-session (dired-get-file-for-visit)))

(defun dired-find-alternate-file-or-dir ()
  "当前位置为目录，在当前缓存打开此目录（相当于 a 命令）；若为文件，执行 dired 默认动作，即在当前窗口新建缓存并打开当前文件（dired 默认动作）。"
  (interactive)
  (let ((file-name (dired-get-filename nil t)))
    (if (file-directory-p file-name)
	(dired-find-alternate-file)
      (dired-advertised-find-file))))

;; 只开启一个 dired 缓存
(add-hook 'dired-mode-hook
	  (lambda ()
		;; 不要自动换行（本地变量）
	    (setq truncate-lines t)
	    (define-key dired-mode-map (kbd "C-x r m") 'dired-bookmark-set)
	    (define-key dired-mode-map (kbd "C-c w") 'dired-w3m-read-it)
		;; 横向移动视图，方便显示长文件名
	    (define-key dired-mode-map (kbd "C-x >") (lambda () (interactive) (scroll-left 32)))
	    (define-key dired-mode-map (kbd "C-x <") (lambda () (interactive) (scroll-right 32)))
	    (define-key dired-mode-map (kbd "<return>") 'dired-find-alternate-file-or-dir) ; was dired-advertised-find-file
	    (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file ".."))) ; was dired-up-directory
	    (define-key dired-mode-map (kbd "TAB") 'dired-async-shell-command-for-alternate-file)))

(defun dired-async-shell-command-for-alternate-file ()
  (interactive)
  (async-shell-command-no-output-buffer-from-file (dired-get-file-for-visit)))

(defun async-shell-command-no-output-buffer-from-file (file)
  "不同文件扩展名，使用不同的程序打开它。
	调用方必须保证命令的正确性。"
  (interactive)
  (if (not (boundp 'file-extension-app-alist))
      ;; smplayer -geometry 1272x700-4-4
      (setq file-extension-app-alist
	    '(("txt" . "emacsclient -c") ("pdf" . "evince") ("djvu" . "evince") ("ps" . "evince")
	      ("rmvb" . "smplayer") ("rm" . "smplayer") ("mp4" . "smplayer") ("avi" . "smplayer") ("mp3" . "smplayer") ("flv" . "smplayer") ("f4v" . "smplayer") ("mpg" . "smplayer") ("mkv" . "smplayer") ("3gp" . "smplayer") ("wmv" . "smplayer") ("mov" . "smplayer") ("dat" . "smplayer") ("asf" . "smplayer") ("mpeg" . "smplayer") ("wma" . "smplayer")
	      ("jpg" . "eog") ("png" . "eog")
	      ("chm" . "chmsee")
;;	      ("html" . "firefox") ("htm" . "firefox")
;;	      ("html" . "opera") ("htm" . "opera")
	      ("html" . "google-chrome") ("htm" . "google-chrome")
;;	      ("html" . "chromium-browser") ("htm" . "chromium-browser")
	      ("pfb" . "gnome-font-viewer") ("ttf" . "gnome-font-viewer")
	      ("doc" . "libreoffice") ("ppt" . "libreoffice") ("chm" . "chmsee")
	      ("gz" . "file-roller") ("rar" . "file-roller") ("zip" . "file-roller") ("bz2" . "file-roller")
	      ))
    )
  (let ((file-exten (downcase (file-name-extension file))))
    (let ((command (cdr (assoc file-exten file-extension-app-alist))))
      ;;
      ;; TODO: 如果 command 为 nil，则提示用户输入其值
      ;;
      ;; start-process		: 创建一个新进程
      ;; "Shell"			: 进程名
      ;; nil			: 为进程指定 buffer
      ;; shell-file-name		: "/bin/bash"
      ;; shell-command-switch	: "-c"
      (start-process "Shell" nil shell-file-name shell-command-switch (concat command " " "\"" file "\"")))))

(defun bookmark-async-shell-command-for-alternate-file ()
  (interactive)
  (async-shell-command-no-output-buffer-from-file (bookmark-location (bookmark-bmenu-bookmark))))

(add-hook 'bookmark-bmenu-mode-hook
	  (lambda ()
	    (define-key bookmark-bmenu-mode-map (kbd "C-c w") (lambda () (interactive) (w3m-goto-url-new-session (bookmark-location (bookmark-bmenu-bookmark)))))
	    (define-key bookmark-bmenu-mode-map (kbd "TAB") 'bookmark-async-shell-command-for-alternate-file)))

(require 'xcscope)
(setq cscope-do-not-update-database t)
(define-key global-map [(control f3)]  'cscope-set-initial-directory)
(define-key global-map [(control f4)]  'cscope-unset-initial-directory)
(define-key global-map [(control f5)]  'cscope-find-this-symbol)
(define-key global-map [(control f6)]  'cscope-find-global-definition)
(define-key global-map [(control f7)]  'cscope-find-global-definition-no-prompting)
(define-key global-map [(control f8)]  'cscope-pop-mark)
(define-key global-map [(control f9)]  'cscope-next-symbol)
(define-key global-map [(control f10)] 'cscope-next-file)
(define-key global-map [(control f11)] 'cscope-prev-symbol)
(define-key global-map [(control f12)] 'cscope-prev-file)
(define-key global-map [(meta f9)]     'cscope-display-buffer)
(define-key global-map [(meta f10)]    'cscope-display-buffer-toggle)

;;; gpg方式加密
;; 下面两行默认已经加载和启用，但还是保留在这里
;;(require 'epa-file)
;;(epa-file-enable)
	;; gpg这个程序会判断 GPG_AGENT_INFO 这个环境变量, 如果设置了, 那么它会弹出一个对话框, 要求输入密码, 更糟糕的是, 它会导致 (setq epa-file-cache-passphrase-for-symmetric-encryption t) 这个设置失效, 在每次保存文件的时候, 都会跳出对话框, 要求设置密码. 
(setenv "GPG_AGENT_INFO" nil)
	;;对称加密方式
(setq epa-file-encrypt-to nil)
	;;保存密码, 那样就不会每次保存都会要求你设置密码
(setq epa-file-cache-passphrase-for-symmetric-encryption t)
	;;自动保存
(setq epa-file-inhibit-auto-save nil)

; from newsgroup gnu.emacs.help, by Richard Riley, 2009-08-02 
(defun open-current-file-as-admin ()
  "Open the current buffer as unix root.
This command works on unixes only."
  (interactive)
  (when buffer-file-name
    (find-alternate-file
     (concat "/sudo:root@localhost:"
           buffer-file-name))))

;; The variable redisplay-dont-pause, when set to t, will cause Emacs to fully redraw the display before it processes queued input events. This may have slight performance implications if you’re aggressively mouse scrolling a document or rely on your keyboard’s auto repeat feature.
(setq redisplay-dont-pause t)

;; If your HTML is in Unicode, you might add the following to your emacs init file:
(setq htmlize-convert-nonascii-to-entities nil)
(setq htmlize-html-charset "utf-8")

;; 在遇到一个错误的时候进入调试器
;; (setq debug-on-error t)

;; eshell 中可以用 e file 来打开文件 file
(defalias 'e 'find-file)

;; xdebug - emacs
(autoload 'geben "geben" "PHP Debugger on Emacs" t)

;; (server-start)
